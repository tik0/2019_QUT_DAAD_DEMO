<launch>

    <!-- GAZEBO arguments -->
    <arg name="paused" default="false"/>
    <arg name="use_sim_time" default="true"/>
    <arg name="gui_gz" default="false"/>
    <arg name="gui_rviz" default="true"/>
    <arg name="config_rviz" default="$(find move_camera_trajectory)/launch/panda_only.rviz"/>
    <arg name="headless" default="false"/>
    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>
    <arg name="load_gripper" default="true"/>
    <arg name="load_robot_description" default="true"/>
    <arg name="panda_xacro" default="$(find franka_description)/robots/panda_arm_hand.urdf.xacro"/>

    <!--launch GAZEBO with own world configuration -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <!-- <arg name="world_name" value="$(find robotics_assisted_tomography)/worlds/tomography.world"/> -->
        <arg name="debug" value="$(arg debug)"/>
        <arg name="gui" value="$(arg gui_gz)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="verbose" value="$(arg verbose)"/>
        <arg name="use_sim_time" value="$(arg use_sim_time)"/>
        <arg name="headless" value="$(arg headless)"/>
    </include>


    <!-- Load the model onto the parameter server and spawn it in Gazebo -->
    <group if="$(arg load_robot_description)">
        <param name="robot_description" command="$(find xacro)/xacro --inorder $(arg panda_xacro)"/>
    </group>
    <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-param robot_description -urdf -model panda"/>

    <!-- Load joint controller configurations from YAML file to parameter server -->
    <rosparam file="$(find panda_simulation)/config/panda_control.yaml" command="load"/>

    <!-- load the controllers -->
    <node name="controller_spawner" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="joint_state_controller panda_arm_controller" />
    <node if="$(arg load_gripper)" name="controller_spawner_hand" pkg="controller_manager" type="spawner" respawn="false" output="screen" args="panda_hand_controller" />


    <!-- convert joint states to TF transforms for rviz, etc -->
    <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

    <include file="$(find panda_moveit_config)/launch/planning_context.launch">
        <arg name="load_robot_description" value="false"/>
        <arg name="load_gripper" value="$(arg load_gripper)" />
    </include>
    <include file="$(find panda_moveit_config)/launch/move_group.launch" >
        <arg name="load_gripper" value="$(arg load_gripper)" />
    </include>
    <group if="$(arg gui_rviz)">
      <arg unless="$(arg debug)" name="launch_prefix" value="" />
      <arg     if="$(arg debug)" name="launch_prefix" value="gdb --ex run --args" />
      <node name="$(anon rviz)" launch-prefix="$(arg launch_prefix)" pkg="rviz" type="rviz" respawn="false" args="-d $(arg config_rviz)" output="screen">
        <rosparam command="load" file="$(find panda_moveit_config)/config/kinematics.yaml"/>
      </node>
    </group>

    <node name="joint_state_desired_publisher" pkg="topic_tools" type="relay" args="joint_states joint_states_desired" />
    
    <!-- launch robot control node for moveit motion planning -->
    <node pkg="move_camera_trajectory" type="timed_roslaunch.sh" args="8 move_camera_trajectory robot_control_node.launch" name="timed_roslaunch_robot_control_node" output="screen" />

</launch>